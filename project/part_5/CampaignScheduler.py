import copy

import numpy as np

from project.dia_pckg.Config import features_space
from project.part_5.ContextGenerator import ContextGenerator
from project.part_5.Week import Week
from project.part_5.Context_B import Context_B

class CampaignScheduler():

    def __init__(self, mab_algorithm, *mab_args):
        # general MAB algorithm to perform multiple tests, with different configurations
        self.MAB = mab_algorithm  # Multi Armed Bandit algorithm to use
        self.MAB_args = mab_args

        self.users = []  # to list the users, serve?
        self.weeks = []  # to store the Week objects
        self.contexts = [] # list of current contexts

        #self.context_generator = ContextGenerator() this should be implemented
        self.collected_rewards = np.array([])
    
    def context_update(self):
        """
            At the end of the week, I take the new contexts from ContextGenerator 
        :return:
        """
        #contexts = self.context_generator.get_weekly_contexts(features_space=features_space, users=self.users) 

        #An example, this should be generated by contex generator above
        old_contexts = copy.deepcopy(self.contexts)
        
        features_space = [[0,0], [0,1], [1,0], [1,1]] #aggregate model feature space
        self.contexts = [Context_B(features_space, self.MAB, self.MAB_args), ] #generate the new contexts list
        
        if (len(old_contexts) > 0): #initialize the new prior with the old one
            prior = old_contexts[0].learner.beta_parameters
            rewards_per_arm = old_contexts[0].learner.rewards_per_arm
            self.contexts[0].learner.initialize_learner(prior, rewards_per_arm)
        #An example, this should be generated by contex generator above

    def pull_arm_from_user(self, user):
        """
        Return the pulled arm from the context in which the user belongs
        :param user: User object
        :return: pulled arm
        """
        self.users.append(user) 
        for context in self.contexts:
            if (context.is_user_belonging(user)):
                return context.learner.pull_arm_revenue()

    def update (self, user, pulled_arm, reward):
        """
        Update the context in which the user belongs, also update the collected rewards
        :param user: User object
        :param user: pulled arm
        :param user: reward associated to the pulled arm
        :return:
        """
        for context in self.contexts:
            if (context.is_user_belonging(user)):
                context.learner.update(pulled_arm, reward)
                real_reward = context.learner.get_real_reward(pulled_arm, reward)
                self.collected_rewards = np.append(self.collected_rewards, real_reward)
