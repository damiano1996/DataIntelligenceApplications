Index: project/part_2/Optimizer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\n\n\ndef fit_table(table_all_Subs):\n    rows = table_all_Subs.shape[0]\n    cols = table_all_Subs.shape[1]\n    algorithm_table = np.ndarray(shape=(0, cols), dtype=float)\n\n    for r in range(0, rows):\n        algorithm_table = np.append(algorithm_table, np.atleast_2d(np.zeros(cols)), 0)\n\n    algorithm_table[0, :] = table_all_Subs[0, :]\n\n    allocations_table = [[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]]\n\n    for i in range(1, rows):\n        allocations_table.append([[], [], [], [], [], [], [], [], [], [], []])\n\n        for j in range(0, cols):\n            possibilities = np.array([])\n            poss_allocation = []\n            for p in range(0, j + 1):\n                possibilities = np.append(possibilities, table_all_Subs[i, p] + algorithm_table[i - 1, j - p])\n                poss_allocation.append(allocations_table[i - 1][j - p] + [p])\n\n            max_index = np.argmax(possibilities)\n\n            algorithm_table[i, j] = possibilities[max_index]\n            allocations_table[i][j] = poss_allocation[max_index]\n    return allocations_table[rows - 1][cols - 1], max(algorithm_table[rows - 1])\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- project/part_2/Optimizer.py	(revision c6e196a709f230d273544946bb21a984d6b65809)
+++ project/part_2/Optimizer.py	(date 1591363724237)
@@ -1,15 +1,15 @@
 import numpy as np
 
 
-def fit_table(table_all_Subs):
-    rows = table_all_Subs.shape[0]
-    cols = table_all_Subs.shape[1]
+def fit_table(table_all_subs):
+    rows = table_all_subs.shape[0]
+    cols = table_all_subs.shape[1]
     algorithm_table = np.ndarray(shape=(0, cols), dtype=float)
 
     for r in range(0, rows):
         algorithm_table = np.append(algorithm_table, np.atleast_2d(np.zeros(cols)), 0)
 
-    algorithm_table[0, :] = table_all_Subs[0, :]
+    algorithm_table[0, :] = table_all_subs[0, :]
 
     allocations_table = [[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]]
 
@@ -20,7 +20,7 @@
             possibilities = np.array([])
             poss_allocation = []
             for p in range(0, j + 1):
-                possibilities = np.append(possibilities, table_all_Subs[i, p] + algorithm_table[i - 1, j - p])
+                possibilities = np.append(possibilities, table_all_subs[i, p] + algorithm_table[i - 1, j - p])
                 poss_allocation.append(allocations_table[i - 1][j - p] + [p])
 
             max_index = np.argmax(possibilities)
Index: project/part_2/Testing_part_2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\nimport numpy as np\nimport pandas as pd\n\nfrom project.dia_pckg.plot_style.cb91visuals import *\nfrom project.part_2.BiddingEnvironment import BiddingEnvironment\nfrom project.part_2.Learner import Learner\nfrom project.part_2.Optimizer import fit_table\n\n# # EXPLORATION PHASE\n\n# In[2]:\n\nnp.random.seed(72)\nn_obs = 100\nn_obs_exploration = round(n_obs * 2 / 3)\nn_obs_exploitation = n_obs - n_obs_exploration\nn_subcamp = 3\nmax_bid = 1\nmax_clicks = 100\nn_arms = 11\n\nbids = np.linspace(0, max_bid, n_arms)\nprint(bids)\n\ntotal_click_each_day = pd.DataFrame(columns=['bid_sub1', 'bid_sub2', 'bid_sub3', \"click1\", \"click2\", \"click3\"])\n\nnoise_std = 6.0\nenv = BiddingEnvironment(bids, max_clicks, noise_std)\n\nlearners = []\nfor i in range(0, n_subcamp):\n    learners.append(Learner(n_arms, bids))\n\n# In[3]:\n\n\nfor i in range(0, n_obs_exploration):\n    clicks = []\n\n    # Pull an arm for each sub-campaign:\n    # It is pulled the arm belonging to the sub-campaign (i%3) which has the maximum variance\n    # For the other 2 sub-campaigns the arm is pulled randomly (s.t. the sum = maximum)\n    ### N.B. This behaviour works only for arms linearly distributed  over the array_bids\n    first = i % 3\n    pulled = [0, 0, 0]\n    pulled[first] = learners[first].pull_arm()\n    pulled[(first + 1) % 3] = np.random.randint(0, n_arms - pulled[first])\n    pulled[(first + 2) % 3] = n_arms - pulled[first] - pulled[(first + 1) % 3] - 1\n\n    clicks = env.round(pulled[0], pulled[1], pulled[2])\n\n    for x in range(0, n_subcamp):\n        learners[x].update(pulled[x], clicks[x])\n    total_click_each_day = total_click_each_day.append({\n        'bid_sub1': pulled[0],\n        'bid_sub2': pulled[1],\n        'bid_sub3': pulled[2],\n        \"click1\": clicks[0],\n        \"click2\": clicks[1],\n        \"click3\": clicks[2]\n    }, ignore_index=True)\n\n# In[4]:\n\n\nfor s in range(0, n_subcamp):\n    learners[s].plot(env.subs[s])\n\n# In[5]:\n\n\ntable_all_Subs = np.ndarray(shape=(0, len(bids)), dtype=float)\nfor l in learners:\n    table_all_Subs = np.append(table_all_Subs, np.atleast_2d(l.means.T), 0)\n\nprint(table_all_Subs)\nprint(fit_table(table_all_Subs))\n\n# # EXPLOITATION PHASE\n\n# In[ ]:\n\n\nfor i in range(0, n_obs_exploitation):\n    clicks = []\n\n    pulled = fit_table(table_all_Subs)[0]\n\n    clicks = env.round(pulled[0], pulled[1], pulled[2])\n\n    for x in range(0, n_subcamp):\n        learners[x].update(pulled[x], clicks[x])\n    total_click_each_day = total_click_each_day.append({\n        'bid_sub1': pulled[0],\n        'bid_sub2': pulled[1],\n        'bid_sub3': pulled[2],\n        \"click1\": clicks[0],\n        \"click2\": clicks[1],\n        \"click3\": clicks[2]\n    }, ignore_index=True)\n\n    table_all_Subs = np.ndarray(shape=(0, len(bids)), dtype=float)\n    for l in learners:\n        table_all_Subs = np.append(table_all_Subs, np.atleast_2d(l.means.T), 0)\n\n# In[ ]:\n\n\nfor s in range(0, n_subcamp):\n    learners[s].plot(env.subs[s])\n\n# In[ ]:\n\n\nprint(fit_table(table_all_Subs))\n\n# ## Regret Computation\n\n# In[ ]:\n\n\nall_optimal_subs = np.ndarray(shape=(0, len(bids)), dtype=float)\nfor i in range(0, n_subcamp):\n    all_optimal_subs = np.append(all_optimal_subs, np.atleast_2d(env.subs[i](bids)), 0)\n\nprint(all_optimal_subs)\nprint(fit_table(all_optimal_subs))\n\n# In[ ]:\n\n\n# list of the collected reward\nrewards_per_experiment = []\nopt = fit_table(all_optimal_subs)[1]\nprint(opt)\n\nfor i in range(0, n_obs):\n    num_clicks_day_i = total_click_each_day.values[i][3] + total_click_each_day.values[i][4] + \\\n                       total_click_each_day.values[i][5]\n    rewards_per_experiment.append(num_clicks_day_i)\n\nplt.figure(0)\nplt.ylabel(\"Regret\")\nplt.xlabel(\"t\")\nplt.plot(np.cumsum(opt - rewards_per_experiment, axis=0), 'r')\nplt.show()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- project/part_2/Testing_part_2.py	(revision c6e196a709f230d273544946bb21a984d6b65809)
+++ project/part_2/Testing_part_2.py	(date 1591365162469)
@@ -75,12 +75,12 @@
 # In[5]:
 
 
-table_all_Subs = np.ndarray(shape=(0, len(bids)), dtype=float)
+table_all_subs = np.ndarray(shape=(0, len(bids)), dtype=float)
 for l in learners:
-    table_all_Subs = np.append(table_all_Subs, np.atleast_2d(l.means.T), 0)
+    table_all_subs = np.append(table_all_subs, np.atleast_2d(l.means.T), 0)
 
-print(table_all_Subs)
-print(fit_table(table_all_Subs))
+print(table_all_subs)
+print(fit_table(table_all_subs))
 
 # # EXPLOITATION PHASE
 
@@ -90,7 +90,7 @@
 for i in range(0, n_obs_exploitation):
     clicks = []
 
-    pulled = fit_table(table_all_Subs)[0]
+    pulled = fit_table(table_all_subs)[0]
 
     clicks = env.round(pulled[0], pulled[1], pulled[2])
 
@@ -105,9 +105,9 @@
         "click3": clicks[2]
     }, ignore_index=True)
 
-    table_all_Subs = np.ndarray(shape=(0, len(bids)), dtype=float)
+    table_all_subs = np.ndarray(shape=(0, len(bids)), dtype=float)
     for l in learners:
-        table_all_Subs = np.append(table_all_Subs, np.atleast_2d(l.means.T), 0)
+        table_all_subs = np.append(table_all_subs, np.atleast_2d(l.means.T), 0)
 
 # In[ ]:
 
@@ -118,7 +118,7 @@
 # In[ ]:
 
 
-print(fit_table(table_all_Subs))
+print(fit_table(table_all_subs))
 
 # ## Regret Computation
 
@@ -148,5 +148,5 @@
 plt.figure(0)
 plt.ylabel("Regret")
 plt.xlabel("t")
-plt.plot(np.cumsum(opt - rewards_per_experiment, axis=0), 'r')
+plt.plot(np.cumsum(opt - rewards_per_experiment, axis=0))
 plt.show()
